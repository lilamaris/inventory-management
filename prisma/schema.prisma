// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  MANAGER
  ADMIN
}

enum AuthType {
  GOOGLE
  GITHUB
  CREDENTIALS
}

enum OrderStatus {
  PENDING
  REJECTED
  CANCELLED
  APPROVED
  DELIVERED
}

model Account {
  id           String   @id @default(uuid())
  providerId   String
  authType     AuthType
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash String?

  @@unique([providerId, authType])
}

model Session {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role Role

  @@unique([userId, role])
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  avatarUrl String?

  emailVerifiedAt   DateTime?
  secretAccessToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]
  roles          UserRole[]
  orders         Order[]
  manager Manager?
}

model Manager {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isOwner Boolean @default(false)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderTransactions OrderTransaction[]

  @@unique([vendorId, userId])
}

model Vendor {
  id          String  @id @default(uuid())
  name        String
  description String?
  thumbnailUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items    Item[]
  managers Manager[]
  categories Category[]

  orders Order[]
}

model Category {
  id   String @id @default(uuid())
  name String

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  items Item[]
}

model Item {
  id          String  @id @default(uuid())
  sku         String  @unique
  name        String
  description String?
  quantity    Int
  price       Int
  thumbnailUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]

  @@unique([vendorId, sku])
}

model Order {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderByUserId String
  orderByUser   User   @relation(fields: [orderByUserId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  items          OrderItem[]
  status         OrderStatus @default(PENDING)
  orderTransactions OrderTransaction[]
}

model OrderTransaction {
  id String @id @default(uuid())

  transactionAt DateTime @default(now())

  orderId String
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  previousStatus   OrderStatus
  status           OrderStatus
  updatedManagerId String
  updatedManager   Manager       @relation(fields: [updatedManagerId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id String @id @default(uuid())
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  itemId String
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
