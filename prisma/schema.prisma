// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  passwordHash  String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  Role                 Role?                  @relation(fields: [roleId], references: [id])
  roleId               String?
  InventoryItem        InventoryItem[]
  InventoryTransaction InventoryTransaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id            String           @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

enum Action {
  VIEW
  CREATE
  UPDATE
  DELETE
}

model Permission {
  id          String           @id @default(uuid())
  domain      String?
  resource    String
  action      Action
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model InventoryItem {
  id           String                 @id @default(uuid())
  name         String
  sku          String                 @unique
  description  String?
  quantity     Int                    @default(0)
  categoryId   String?
  category     Category?              @relation(fields: [categoryId], references: [id])
  createdById  String
  createdBy    User                   @relation(fields: [createdById], references: [id])
  createdAt    DateTime               @default(now())
  updatedAT    DateTime               @updatedAt
  transactions InventoryTransaction[]
}

model Category {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  item        InventoryItem[]
}

model InventoryTransaction {
  id          String        @id @default(uuid())
  item        InventoryItem @relation(fields: [itemId], references: [id])
  itemId      String
  change      Int
  note        String?
  createdById String
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdAt   DateTime      @default(now())
}
