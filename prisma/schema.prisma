// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  VIEWER
  MANAGER
  ADMIN
}

enum AuthType {
  GOOGLE
  GITHUB
  CREDENTIALS
}

model Account {
  id           String   @id @default(uuid())
  providerId   String
  authType     AuthType
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  passwordHash String?

  @@unique([providerId, authType])
}

model Session {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserRole {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  role Role

  @@unique([userId, role])
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  avatarUrl String?

  emailVerifiedAt   DateTime?
  secretAccessToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]
  roles          UserRole[]
  purchaseOrders PurchaseOrder[]

  manageVendor VendorManager[]
}

model VendorManager {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isOwner Boolean @default(false)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  transactions PurchaseOrderTransaction[]

  @@unique([userId, vendorId])
}

model Vendor {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items    VendorItem[]
  managers VendorManager[]

  purchaseOrders PurchaseOrder[]
}

model VendorCategory {
  id   String @id @default(uuid())
  name String

  items VendorItem[]
}

model VendorItem {
  id          String  @id @default(uuid())
  sku         String  @unique
  name        String
  description String?
  quantity    Int
  price       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String?
  category   VendorCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  purchaseOrderItems PurchaseOrderItem[]

  @@unique([vendorId, sku])
}

enum PurchaseOrderStatus {
  PENDING
  REJECTED
  CANCELLED
  APPROVED
  DELIVERED
}

model PurchaseOrder {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderByUserId String
  orderByUser   User   @relation(fields: [orderByUserId], references: [id], onDelete: Cascade)

  vendorId String
  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  items          PurchaseOrderItem[]
  status         PurchaseOrderStatus @default(PENDING)
  transactions PurchaseOrderTransaction[]
}

model PurchaseOrderTransaction {
  id String @id @default(uuid())

  transactionAt DateTime @default(now())

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  previousStatus   PurchaseOrderStatus
  status           PurchaseOrderStatus
  updatedManagerId String
  updatedManager   VendorManager       @relation(fields: [updatedManagerId], references: [id], onDelete: Cascade)
}

model PurchaseOrderItem {
  id String @id @default(uuid())
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  
  vendorItemId String
  vendorItem   VendorItem @relation(fields: [vendorItemId], references: [id], onDelete: Cascade)
}
