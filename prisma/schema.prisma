// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  passwordHash             String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  role                     Role?                      @relation(fields: [roleId], references: [id])
  roleId                   String?
  purchaseOrderTransactions PurchaseOrderTransaction[]
  salesOrderTransactions    SalesOrderTransaction[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  permissions RolePermission[]
  users       User[]
}

enum Action {
  VIEW
  CREATE
  UPDATE
  DELETE
}

model Permission {
  id          String           @id @default(uuid())
  domain      String?
  resource    String
  action      Action
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@unique([roleId, permissionId])
}

model Item {
  id          String   @id @default(uuid())
  name        String
  sku         String   @unique
  description String?
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category          Category            @relation(fields: [categoryId], references: [id])
  categoryId        String
  purchaseOrderItems PurchaseOrderItem[]
  salesOrderItems    SalesOrderItem[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  items       Item[]
}

model Vendor {
  id            String          @id @default(uuid())
  name          String
  description   String?
  purchaseOrders PurchaseOrder[]
}

model Customer {
  id         String       @id @default(uuid())
  name       String
  salesOrders SalesOrder[]
}

enum OrderStatus {
  PENDING
  SHIPPING
  SHIPPED
  COMPLETED
  CANCELLED
}

model PurchaseOrder {
  id         String      @id @default(uuid())
  status     OrderStatus
  orderedAt  DateTime
  expectedAt DateTime

  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  items                    PurchaseOrderItem[]
  purchaseOrderTransactions PurchaseOrderTransaction[]
}

model SalesOrder {
  id         String      @id @default(uuid())
  status     OrderStatus
  orderedAt  DateTime
  expectedAt DateTime

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  items                 SalesOrderItem[]
  salesOrderTransactions SalesOrderTransaction[]
}

model PurchaseOrderItem {
  id        String @id @default(uuid())
  quantity  Int
  unitPrice Int

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String

  item   Item   @relation(fields: [itemId], references: [id])
  itemId String
}

model SalesOrderItem {
  id        String @id @default(uuid())
  quantity  Int
  unitPrice Int

  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  salesOrderId String

  item   Item   @relation(fields: [itemId], references: [id])
  itemId String
}

model PurchaseOrderTransaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String
}

model SalesOrderTransaction {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  salesOrder   SalesOrder @relation(fields: [salesOrderId], references: [id])
  salesOrderId String
}
